const { Bot, InlineKeyboard } = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");
const { questions } = require("./data");
const { sequelize, User, Requests } = require("./models");
require("dotenv").config();

const bot = new Bot(process.env.BOT_TOKEN);
bot.use(hydrate());

sequelize.sync().then(() => console.log("Database synced"));
(async () => {
	await sequelize.sync({ alter: true });
})();

// bot.api.setMyCommands([
// 	{ command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
// 	{ command: "menu", description: "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é" },
// ]);

const menuKeyboard = new InlineKeyboard()
	.text("–ú–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", "questions")
	.text("–ú–æ–∏ –∑–∞—è–≤–∫–∏", "show_requests")
	.row()
	.text("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã", "show-payment")
	.row()
	.text("–û –±–æ—Ç–µ", "about")
	.url("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/beastovsk");

let isQuestion = false;

bot.command("start", async (ctx) => {
	const name = ctx.from.first_name;
	const userId = ctx.from.id;
	const telegramId = String(ctx.from.id);
	const user = await User.findOne({ where: { telegramId } });
	const requests = await Requests.findAll({ where: { ownerId: telegramId } });

	if (!user) {
		await User.create({
			id: userId,
			telegramId,
			isSubscribed: false,
			subscriptionPlan: null,
			subscriptionStarts: null,
			subscriptionEnds: null,
			questions: [],
		});
		await ctx.reply(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${name}! \n–ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É —Å –ª–∏–¥–∞–º–∏ –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. üöÄ –ú—ã –ø–æ–Ω–∏–º–∞–µ–º, –∫–∞–∫ –≤–∞–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –±–µ–∑ –¥–æ–ª–≥–∏—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π.

	–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É–ø—Ä–æ—â–∞—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏ –∏ –¥–µ–ª–∞—è –≤–∞—à —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º! üìä‚ú®`);
	}
	await ctx.reply(
		`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è ${requests.length} –∑–∞—è–≤–æ–∫\n–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ª–∏–¥–æ–≤ - https://t.me/reality_form_bot?start=${telegramId}`,
		{
			reply_markup: menuKeyboard,
		}
	);
});

bot.command("menu", async (ctx) => {
	const userId = String(ctx.from.id);
	const requests = await Requests.findAll({ where: { ownerId: userId } });

	await ctx.reply(
		`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è ${requests.length} –∑–∞—è–≤–æ–∫\n–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ª–∏–¥–æ–≤ - https://t.me/reality_form_bot?start=${userId}`,
		{ reply_markup: menuKeyboard }
	);
});

bot.callbackQuery("questions", async (ctx) => {
	const keyboard = new InlineKeyboard();
	const telegramId = String(ctx.from.id);

	const user = await User.findOne({ where: { telegramId } });
	const questions = user?.questions;

	if (questions && questions?.length) {
		questions.forEach((question, index) => {
			if (index % 2 === 0) {
				keyboard.row();
			}
			keyboard.text(
				`–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å ${index + 1}`,
				`delete_question_${index}`
			);
		});
	}

	const text =
		questions && questions?.length
			? `–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n${user.questions
					.map((item, i) => `${i + 1}. ${item}\n`)
					.join("")}`
			: "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç. –°–∞–º–æ–µ –≤—Ä–µ–º—è –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç—å.";

	await ctx.callbackQuery.message.editText(text, {
		reply_markup: keyboard
			.row()
			.text("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "add_question")
			.row()
			.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back"),
	});
});

bot.callbackQuery(/delete_question_\d+/, async (ctx) => {
	const telegramId = String(ctx.from.id);
	const user = await User.findOne({ where: { telegramId } });
	const index = parseInt(ctx.match[0].split("_")[2]);

	user.questions = [
		...user.questions.slice(0, index),
		...user.questions.slice(index + 1),
	];
	await user.save();

	await ctx.callbackQuery.message.editText("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω", {
		reply_markup: new InlineKeyboard()
			.row()
			.text("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "add_question")
			.row()
			.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back"),
	});
});

bot.callbackQuery("add_question", async (ctx) => {
	await ctx.callbackQuery.message.editText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", {
		reply_markup: new InlineKeyboard()
			.row()
			.text("–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", "questions"),
	});
	isQuestion = true;
});
bot.callbackQuery("show_requests", async (ctx) => {
	const telegramId = String(ctx.from.id);
	const requests = await Requests.findAll({ where: { ownerId: telegramId } });
	const user = await User.findOne({ where: { telegramId } });
	const keyboard = new InlineKeyboard();

	const now = new Date();
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –≤–æ–æ–±—â–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∞ –ø–æ—Ç–æ–º ‚Äî –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
	if (user.subscriptionEnds && user.subscriptionEnds <= now) {
		await user.update({
			isSubscribed: false,
			subscriptionStarts: null,
			subscriptionEnds: null,
		});

		return await ctx.callbackQuery.message.editText(
			"–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω",
			{
				reply_markup: new InlineKeyboard().text(
					"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∞—Ä–∏—Ñ–∞–º",
					"show-payment"
				),
			}
		);
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
	if (!user.isSubscribed) {
		return await ctx.callbackQuery.message.editText(
			"–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω",
			{
				reply_markup: new InlineKeyboard().text(
					"–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–∞—Ä–∏—Ñ–∞–º",
					"show-payment"
				),
			}
		);
	}

	if (!requests || requests.length === 0) {
		await ctx.callbackQuery.message.editText("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.", {
			reply_markup: keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back"),
		});
		return;
	}

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫
	requests.forEach((request, index) => {
		keyboard.text(
			`–ó–∞—è–≤–∫–∞ –æ—Ç ${new Date(request.date).toLocaleString()}`,
			`request_${index}`
		);
	});

	await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", {
		reply_markup: keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back"),
	});
});

bot.callbackQuery(/request_\d+/, async (ctx) => {
	const index = parseInt(ctx.match[0].split("_")[1]);
	const telegramId = String(ctx.from.id);

	const requests = await Requests.findAll({ where: { ownerId: telegramId } });

	if (index < 0 || index >= requests.length) {
		await ctx.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞—è–≤–∫–∏.");
		return;
	}

	const request = requests[index];

	const answersText =
		request.answers
			.map((answer) => `*${answer.question}*\n${answer.response}`)
			.join("\n\n") + `\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - @${request.sender}`;

	const backKeyboard = new InlineKeyboard()
		.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "show_requests")
		.text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back");

	await ctx.callbackQuery.message.editText(
		`–î–∞—Ç–∞: ${new Date(request.date).toLocaleString()}\n\n${answersText}`,
		{
			parse_mode: "Markdown",
			reply_markup: backKeyboard,
		}
	);
});

bot.callbackQuery("show-payment", async (ctx) => {
	const telegramId = String(ctx.from.id);
	const user = await User.findOne({ where: { telegramId } });

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	const subscriptionStatus = user?.isSubscribed
		? `üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: *${
				user.subscriptionPlan
		  }* \n–°: *${user.subscriptionStarts.toLocaleDateString()}* –î–æ: *${user.subscriptionEnds.toLocaleDateString()}*`
		: "üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.";

	// –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
	const paymentKeyboard = new InlineKeyboard()
		.text("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "payment_1")
		.text("–ù–∞ –¥–µ–Ω—å", "payment_2")
		.row()
		.text("–ù–∞ –Ω–µ–¥–µ–ª—é", "payment_3")
		.text("–ù–∞ –º–µ—Å—è—Ü", "payment_4")
		.row()
		.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back");

	await ctx.callbackQuery.message.editText(
		`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:

üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ 3 –¥–Ω—è ‚Äî –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–¶–µ–Ω–∞: 0 —Ä—É–±.

üìÖ –î–µ–Ω—å ‚Äî –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 24 —á–∞—Å–∞.
–¶–µ–Ω–∞: 99 —Ä—É–±.

üóì –ù–µ–¥–µ–ª—è ‚Äî 7 –¥–Ω–µ–π –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
–¶–µ–Ω–∞: 499 —Ä—É–±.

üìÜ –ú–µ—Å—è—Ü ‚Äî –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π.
–¶–µ–Ω–∞: 1,499 —Ä—É–±.

---

üîî *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏* üîî
${subscriptionStatus}`,
		{ reply_markup: paymentKeyboard, parse_mode: "Markdown" }
	);
});

bot.on("pre_checkout_query", async (ctx) => {
	try {
		await ctx.answerPreCheckoutQuery(true);
		console.log("Pre-checkout query confirmed successfully.");
	} catch (error) {
		console.error("Error confirming pre_checkout_query:", error);
		await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
	}
});

bot.callbackQuery(/payment_\d+/, async (ctx) => {
	const telegramId = String(ctx.from.id);
	const user = await User.findOne({ where: { telegramId } });
	const index = parseInt(ctx.match[0].split("_")[1]);

	let price = 0;
	let plan = "";

	if (index === 1) {
		const now = new Date();
		const registrationDate = new Date(user.createdAt); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ª–µ createdAt

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –¥–∞—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		const daysSinceRegistration = Math.floor(
			(now - registrationDate) / (1000 * 60 * 60 * 24)
		);

		// –ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–æ 3 –∏–ª–∏ –±–æ–ª–µ–µ –¥–Ω–µ–π
		if (daysSinceRegistration >= 3) {
			await ctx.reply(
				"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏—Å—Ç—ë–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ."
			);
			return;
		}

		// –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—É –º–µ–Ω—å—à–µ 3 –¥–Ω–µ–π, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω
		const subscriptionStarts = now;
		const subscriptionEnds = new Date(now);
		subscriptionEnds.setDate(subscriptionEnds.getDate() + 3); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await user.update({
			isSubscribed: true,
			subscriptionPlan: "gift",
			subscriptionStarts,
			subscriptionEnds,
		});

		await ctx.reply("–ü—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 –¥–Ω—è!");
		return;
	}

	switch (index) {
		case 2:
			price = 9900;
			plan = "day";
			break;
		case 3:
			price = 49900;
			plan = "week";
			break;
		case 4:
			price = 149900;
			plan = "month";
			break;

		default:
			break;
	}

	await ctx.api.sendInvoice(
		ctx.chat.id, // ID —á–∞—Ç–∞
		"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å", // –ó–∞–≥–æ–ª–æ–≤–æ–∫
		"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã", // –û–ø–∏—Å–∞–Ω–∏–µ
		JSON.stringify({ userId: ctx.from?.id, plan }), // Payload —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		"RUB", // –í–∞–ª—é—Ç–∞
		[{ label: `${plan}`, amount: price }], // –¶–µ–Ω–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (30000 = 300 RUB)
		{
			start_parameter: "subscription",
			is_flexible: false,
			provider_token: process.env.PAYMENT_PROVIDER_TOKEN, // –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
		}
	);
});

bot.callbackQuery("about", async (ctx) => {
	ctx.callbackQuery.message.editText(
		`
–û –±–æ—Ç–µ ü§ñ

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≤–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ Telegram. üåü

–í–æ—Ç —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:

–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞: üè∑Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ, —ç–∫–æ–Ω–æ–º—è –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!

–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤: üìù –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç. –°–æ–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!

–õ–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: üîó –ö–æ–ø–∏—Ä—É–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–µ –≤–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º.

–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫: üì¨ –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö. –ë—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤!

–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞—à –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram! üöÄ`,
		{ reply_markup: new InlineKeyboard().text("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "back") }
	);
});

bot.callbackQuery("back", async (ctx) => {
	const telegramId = String(ctx.from.id);
	const requests = await Requests.findAll({ where: { ownerId: telegramId } });

	await ctx.callbackQuery.message.editText(
		`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è ${requests.length} –∑–∞—è–≤–æ–∫\n–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ª–∏–¥–æ–≤ - https://t.me/reality_form_bot?start=${telegramId}`,
		{ reply_markup: menuKeyboard }
	);
});

bot.on("message", async (ctx) => {
	const payment = ctx.message?.successful_payment;
	const message = ctx.update.message;
	const telegramId = String(ctx.from.id);
	const user = await User.findOne({ where: { telegramId } });

	if (isQuestion) {
		const questions = user?.questions ?? [];

		user.questions = [...questions, message.text];
		await user.save();

		isQuestion = false;

		const replyText = "–í–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω";
		const replyMarkup = new InlineKeyboard().text("–í–µ—Ä–Ω—É—Ç—å—Å—è", "questions");

		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞
		if (
			ctx.update.message.text !== replyText ||
			ctx.update.message.reply_markup !== replyMarkup
		) {
			ctx.reply(replyText, { reply_markup: replyMarkup });
		} else {
			console.log(
				"–¢–µ–∫—Å—Ç –∏ —Ä–∞–∑–º–µ—Ç–∫–∞ —É–∂–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ù–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
			);
		}
	}

	if (payment) {
		try {
			const { plan } = JSON.parse(payment.invoice_payload);
			// –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ - –Ω–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏
			const subscriptionStarts = new Date();
			// –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
			const subscriptionEnds = new Date(subscriptionStarts);

			// –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
			switch (plan) {
				case "day":
					subscriptionEnds.setDate(subscriptionEnds.getDate() + 1);
					break;
				case "week":
					subscriptionEnds.setDate(subscriptionEnds.getDate() + 7);
					break;
				case "month":
					subscriptionEnds.setMonth(subscriptionEnds.getMonth() + 1);
					break;
				default:
					throw new Error("Unknown subscription plan");
			}

			// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			await user.update({
				isSubscribed: true,
				subscriptionPlan: plan,
				subscriptionStarts,
				subscriptionEnds,
			});

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
			await ctx.reply(
				`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–ª–∞–Ω "${plan}" —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã.`
			);
		} catch (error) {
			console.error("Error handling successful payment:", error);
			ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
		}
	}
});

bot.start();
