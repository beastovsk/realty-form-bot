const { Bot, InlineKeyboard } = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");
const { requests, questions } = require("./data");
require("dotenv").config();

const bot = new Bot(process.env.BOT_TOKEN);
bot.use(hydrate());

// bot.api.setMyCommands([
// 	{ command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
// 	{ command: "menu", description: "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é" },
// ]);

const menuKeyboard = new InlineKeyboard()
	.text("–ú–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", "questions")
	.text("–ú–æ–∏ –∑–∞—è–≤–∫–∏", "show_requests")
	.row()
	.text("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã", "show-payment")
	.row()
	.text("–ö–∞–∫ –º–Ω–µ –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç?", "about")
	.url("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/beastovsk");

let isQuestion = false;

bot.command("start", async (ctx) => {
	const name = ctx.from.first_name;
	await ctx.react("üëç");
	await ctx.reply(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${name}! \n–ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É —Å –ª–∏–¥–∞–º–∏ –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. üöÄ –ú—ã –ø–æ–Ω–∏–º–∞–µ–º, –∫–∞–∫ –≤–∞–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –±–µ–∑ –¥–æ–ª–≥–∏—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π.

–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É–ø—Ä–æ—â–∞—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏ –∏ –¥–µ–ª–∞—è –≤–∞—à —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º! üìä‚ú®`);
	await ctx.reply(
		`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è ${requests.length} –∑–∞—è–≤–æ–∫\n- –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –¥–µ–º–æ`,
		{
			reply_markup: menuKeyboard,
		}
	);
});

bot.command("menu", async (ctx) => {
	await ctx.reply(
		`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è ${requests.length} –∑–∞—è–≤–æ–∫\n- –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –¥–µ–º–æ`,
		{
			reply_markup: menuKeyboard,
		}
	);
});

bot.callbackQuery("questions", async (ctx) => {
	const keyboard = new InlineKeyboard();

	questions.forEach((question, index) => {
		if (index % 2 === 0) {
			keyboard.row();
		}
		keyboard.text(
			`–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å ${index + 1}`,
			`delete_question_${index}`
		);
	});

	const text = questions.length
		? `–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã:\n${questions
				.map((item, i) => `${i + 1}. ${item}\n`)
				.join("")}`
		: "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç. –°–∞–º–æ–µ –≤—Ä–µ–º—è –∏—Ö –∑–∞–ø–æ–ª–Ω–∏—Ç—å.";

	await ctx.callbackQuery.message.editText(text, {
		reply_markup: keyboard
			.row()
			.text("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "add_question")
			.row()
			.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back"),
	});
});

bot.callbackQuery(/delete_question_\d+/, async (ctx) => {
	const index = parseInt(ctx.match[0].split("_")[1]);

	// –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º

	await ctx.callbackQuery.message.editText("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω", {
		reply_markup: new InlineKeyboard()
			.row()
			.text("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", "add_question")
			.row()
			.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back"),
	});
});

bot.callbackQuery("add_question", async (ctx) => {
	await ctx.callbackQuery.message.editText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", {
		reply_markup: new InlineKeyboard()
			.row()
			.text("–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", "questions"),
	});
	isQuestion = true;
});

bot.callbackQuery("show_requests", async (ctx) => {
	const keyboard = new InlineKeyboard();

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏ –∑–∞—è–≤–æ–∫
	requests.forEach((request, index) => {
		keyboard.text(
			`–ó–∞—è–≤–∫–∞ –æ—Ç ${new Date(request.date).toLocaleString()}`,
			`request_${index}`
		);
	});

	await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:", {
		reply_markup: keyboard.row().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back"),
	});
});

bot.callbackQuery(/request_\d+/, async (ctx) => {
	const index = parseInt(ctx.match[0].split("_")[1]);
	const request = requests[index];

	const answersText = request.answers
		.map((answer) => `*${answer.question}*\n${answer.response}`)
		.join("\n\n");

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
	const backKeyboard = new InlineKeyboard()
		.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "show_requests")
		.text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back");

	await ctx.callbackQuery.message.editText(
		`–î–∞—Ç–∞: ${new Date(request.date).toLocaleString()}\n\n${answersText}`,
		{
			parse_mode: "Markdown",
			reply_markup: backKeyboard,
		}
	);
});

bot.callbackQuery("show-payment", async (ctx) => {
	const paymentKeyboard = new InlineKeyboard()
		.text("–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "payment_1")
		.text("–ù–∞ –¥–µ–Ω—å", " payment_2")
		.row()
		.text("–ù–∞ –Ω–µ–¥–µ–ª—é", "payment_3")
		.text("–ù–∞ –º–µ—Å—è—Ü", "payment_4")
		.row()
		.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back");

	await ctx.callbackQuery.message.editText(
		`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:

üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ 3 –¥–Ω—è ‚Äî –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–¶–µ–Ω–∞: 0 —Ä—É–±.

üìÖ –î–µ–Ω—å ‚Äî –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 24 —á–∞—Å–∞.
–¶–µ–Ω–∞: 99 —Ä—É–±.

üóì –ù–µ–¥–µ–ª—è ‚Äî 7 –¥–Ω–µ–π –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
–¶–µ–Ω–∞: 499 —Ä—É–±.

üìÜ –ú–µ—Å—è—Ü ‚Äî –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π.
–¶–µ–Ω–∞: 1,499 —Ä—É–±.`,
		{ reply_markup: paymentKeyboard }
	);
});

bot.on("pre_checkout_query", async (ctx) => {
	try {
		await ctx.answerPreCheckoutQuery(true);
		console.log("Pre-checkout query confirmed successfully.");
	} catch (error) {
		console.error("Error confirming pre_checkout_query:", error);
		await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
	}
});

bot.callbackQuery(/payment_\d+/, async (ctx) => {
	const index = parseInt(ctx.match[0].split("_")[1]);
	let price = 0;
	let plan = "";
	if (index === 1) {
		await ctx.reply("–ü—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω");
		return;
	}

	switch (index) {
		case 2:
			price = 9900;
			plan = "–ù–∞ –¥–µ–Ω—å";
			break;
		case 3:
			price = 49900;
			plan = "–ù–∞ –Ω–µ–¥–µ–ª—é";
			break;
		case 4:
			price = 149900;
			plan = "–ù–∞ –º–µ—Å—è—Ü";
			break;

		default:
			break;
	}

	await ctx.api.sendInvoice(
		ctx.chat.id, // ID —á–∞—Ç–∞
		"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å", // –ó–∞–≥–æ–ª–æ–≤–æ–∫
		"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã", // –û–ø–∏—Å–∞–Ω–∏–µ
		JSON.stringify({ userId: ctx.from?.id, plan }), // Payload —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		"RUB", // –í–∞–ª—é—Ç–∞
		[{ label: `${plan}`, amount: price }], // –¶–µ–Ω–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (30000 = 300 RUB)
		{
			start_parameter: "subscription",
			is_flexible: false,
			provider_token: process.env.PAYMENT_PROVIDER_TOKEN, // –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
		}
	);
});

bot.callbackQuery("back", async (ctx) => {
	await ctx.callbackQuery.message.editText(
		`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è ${requests.length} –∑–∞—è–≤–æ–∫\n- –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –¥–µ–º–æ`,
		{ reply_markup: menuKeyboard }
	);
});

bot.on("message", async (ctx) => {
	const payment = ctx.message?.successful_payment;
	const message = ctx.update.message;

	if (isQuestion) {
		isQuestion = false;
		// –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
		questions.push(message.text);
		ctx.reply("–í–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω", {
			reply_markup: new InlineKeyboard().text("–í–µ—Ä–Ω—É—Ç—å—Å—è", "questions"),
		});
	}

	if (payment) {
		try {
			const { userId } = JSON.parse(payment.invoice_payload);

			ctx.reply(
				"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã."
			);
		} catch (error) {
			console.error("Error handling successful payment:", error);
			ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
		}
	}
});

bot.start();
