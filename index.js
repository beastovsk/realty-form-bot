const { Bot, InlineKeyboard } = require("grammy");
const { hydrate } = require("@grammyjs/hydrate");
require("dotenv").config();

const bot = new Bot(process.env.BOT_TOKEN);
bot.use(hydrate());

bot.api.setMyCommands([
	{ command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
	{ command: "menu", description: "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é" },
]);

const menuKeyboard = new InlineKeyboard()
	.text("–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", "create-questions")
	.text("–ú–æ–∏ –∑–∞—è–≤–∫–∏", "show_answers")
	.row()
	.text("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã", "show-payment")
	.row()
	.text("–ö–∞–∫ –º–Ω–µ –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç?", "about")
	.url("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "https://t.me/beastovsk");

const backKeyboard = new InlineKeyboard().text("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "back");

bot.command("start", async (ctx) => {
	const name = ctx.from.first_name;
	await ctx.react("üëç");
	await ctx.reply(`–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${name}! \n–ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–±–ª–µ–≥—á–∏—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É —Å –ª–∏–¥–∞–º–∏ –∏ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. üöÄ –ú—ã –ø–æ–Ω–∏–º–∞–µ–º, –∫–∞–∫ –≤–∞–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –±–µ–∑ –¥–æ–ª–≥–∏—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π.

–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Ç—ã —Å–º–æ–∂–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É–ø—Ä–æ—â–∞—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏ –∏ –¥–µ–ª–∞—è –≤–∞—à —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º! üìä‚ú®`);
	await ctx.reply(`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è 0 –∑–∞—è–≤–æ–∫\n- –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –¥–µ–º–æ`, {
		reply_markup: menuKeyboard,
	});
});

bot.command("menu", async (ctx) => {
	await ctx.reply(`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è 0 –∑–∞—è–≤–æ–∫\n- –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –¥–µ–º–æ`, {
		reply_markup: menuKeyboard,
	});
});

bot.callbackQuery("create-questions", async (ctx) => {
	await ctx.callbackQuery.message.editText(
		"–í–≤–µ–¥–∏ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ü—Ä–∏–º–µ—Ä: –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –æ–±—ä–µ–∫—Ç?,–ù–∞ —Å–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤?",
		{ reply_markup: backKeyboard }
	);
});

bot.callbackQuery("back", async (ctx) => {
	await ctx.callbackQuery.message.editText(
		`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è 0 –∑–∞—è–≤–æ–∫\n- –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –¥–µ–º–æ`,
		{ reply_markup: menuKeyboard }
	);
});

bot.on("message", async (ctx) => {
	const text = ctx.update.message.text;
	console.log(ctx.update.message.text);

	if (text.split(",").length) {
		const questionList = text.split(",");

		await ctx.react("‚úç");
		await ctx.reply(
			`–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–ø–∏—Å–∞–Ω—ã\n${questionList
				.map((question) => `${question}\n`)
				.join("")}`
		);
		await ctx.reply();
		await ctx.reply(
			`–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n- –£ —Ç–µ–±—è 0 –∑–∞—è–≤–æ–∫\n- –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: –¥–µ–º–æ`,
			{
				reply_markup: menuKeyboard,
			}
		);
	}
});

bot.start();
